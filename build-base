#!/bin/sh


build_base () {
    ${RM_BIN} -f "${LOG_OUTPUT}"
    ${TOUCH_BIN} "${LOG_OUTPUT}"
    permnote "Process started for OS version: ${SYSTEM_VERSION_MAJOR}, architecture: ${ARCH}, timestamp: @${TIMESTAMP}"

    permnote "Make '/'' writable for build_base()…"
    _current_root_dataset="$(${BEADM_BIN} list -H 2>/dev/null | ${GREP_BIN} -F 'NR' 2>/dev/null | ${CUT_BIN} -f1 2>/dev/null)"
    zfs set readonly=off "zroot/ROOT/${_current_root_dataset}"

    permnote "Making sure zroot/tmp dataset is destroyed"
    zfs list | grep -F "zroot/tmp" >/dev/null 2>&1
    if [ "0" = "${?}" ]; then
        zfs destroy "zroot/tmp"
    fi

    permnote "Making sure zroot/home is created"
    mkdir -p "/usr/home"
    zfs list | grep -F "zroot/home" >/dev/null 2>&1
    if [ "0" != "${?}" ]; then
        zfs create -o mountpoint="/usr/home" "zroot/home"
    fi

    permnote "${SYSTEM_TYPE} version: ${VERSION}"
    permnote "Build repository: ${WORKSTATION_REPO_CACHED}"

    ${RM_BIN} -f /etc/src.conf /etc/make.conf
    ${INSTALL_BIN} -v \
        "${SERVED_REPO}/etc/src.conf" \
        "/etc/src.conf" && \
    ${INSTALL_BIN} -v \
        "${SERVED_REPO}/etc/make.conf" \
        "/etc/make.conf" && \
        permnote "Installed: /etc/src.conf, /etc/make.conf"

    ${MKDIR_BIN} -p "/${LAMBDA}/src" "/${LAMBDA}/obj" "/tmp"
    if [ -z "${DONT_BUILD_WORLD}" ]; then
        printf '%s\n%s\n%s\n%s\n' \
            "# ServeD-build-host - Sofin ram-disk configuration:" \
            "tmpfs   /tmp             tmpfs   rw,mode=777     0 0" \
            "tmpfs   /${LAMBDA}/src   tmpfs   rw,mode=777     0 0" \
            "tmpfs   /${LAMBDA}/obj   tmpfs   rw,mode=777     0 0" \
             > /etc/fstab.svd && \
            ${INSTALL_BIN} -v /etc/fstab.svd /etc/fstab && \
            permnote "RAM-disk fstab setup complete."

        permnote "Mounting tmpfs under: /${LAMBDA}/src, /${LAMBDA}/obj and /tmp"
        ${UMOUNT_BIN} -f "/tmp" >/dev/null 2>&1
        ${UMOUNT_BIN} -f "/${LAMBDA}/src" >/dev/null 2>&1
        ${UMOUNT_BIN} -f "/${LAMBDA}/obj" >/dev/null 2>&1

        ${MOUNT_BIN} "/tmp" && permnote "Mounted: /tmp"
        ${MOUNT_BIN} "/${LAMBDA}/src" && permnote "Mounted: /${LAMBDA}/src"
        ${MOUNT_BIN} "/${LAMBDA}/obj" && permnote "Mounted: /${LAMBDA}/obj"
    else
        echo
        echo "NOTE:"
        echo "  Leaving tmpfs mounts intact."
        echo "Continuation-build detected (DONT_BUILD_WORLD is defined with value: ${DONT_BUILD_WORLD}). Continuing"
        echo
    fi

    _tmpdir="/tmp/src"
    permnote "Cloning os-branch: ${CURRENT_BRANCH} to: ${_tmpdir}"
    ${GIT_BIN} clone \
        --progress \
        --depth 1 \
        --single-branch \
        --branch "${CURRENT_BRANCH}" \
        --jobs "${PARALLEL_JOBS}" \
        "file://${WORKSTATION_REPO_CACHED}" \
        "${_tmpdir}"

    test -d "${_tmpdir}" || exit 106
    test -n "${VERSION}" || exit 107
    test -n "${ARCH}" || exit 108
    test -n "${SYSTEM_TYPE}" || exit 109

    permnote "Synchronizing src ram-disk"
    ${CP_BIN} -R "/tmp/src/" "/${LAMBDA}/src" \
        && (${UMOUNT_BIN} -f "/tmp" && ${MOUNT_BIN} "/tmp")
    cd "/${LAMBDA}/src"

    case "${SYSTEM_VERSION_MAJOR}" in
        12*)
            permnote "Fetching tools/tools/locale/etc/final-maps/widths.txt from CURRENT"
            fetch "http://software.verknowsys.com/source/widths.txt"
            ${MV_BIN} -v widths.txt tools/tools/locale/etc/final-maps/widths.txt
            ;;
    esac

    permnote "Preconfiguring git"
    git config --global user.email "dmilith@gmail.com"
    git config --global user.name "VerKnowSys"

    export CCACHE_PATH="/Services/Sofin/exports/ccache"

    for _patch in ${SERVED_REPO}/patches/*.patch; do
        if [ -f "${_patch}" ]; then
            permnote "Applying custom patch: ${_patch}"
            patch -p0 < "${_patch}"
        fi
    done

    # EXAMPLE:
    #
    # echo "Fetching HBSD current tree"
    # git remote add current "ssh://${WORKSTATION_USER}@${HOSTADDR_GW}:${WORKSTATION_REPO_CACHED}"
    # git fetch --jobs 6 current
    #
    # echo "Cherry picking patches from HBSD current"
    # Fix harmless locking bug in tfp_fastopen_check_cookie():
    # git cherry-pick --ff acbbc549618ac96dd2dd461429558f6cf135e31a || exit 110
    #
    # Fix VIMAGE-related bugs in TFO. The autokey callout vnet context was:
    # git cherry-pick --ff 6c91473476ff712b71b6a9b25afa162fa15a5d23 || exit 111
    #
    # ctf dwarf: don't report "no dwarf entry" as if it were an error:
    # git cherry-pick --ff 3895dd38ecf4dc422d3e1656844a051e0aa5d06c || exit 112

    # echo "Applying linker patches"
    # ??
    # patch -p1 < "${SERVED_REPO}/patches/ld.lld-ignore-R_X86_64_RELATIVE.patch"

    _new_boot_env="${SYSTEM_TYPE}-v${VERSION}-${ARCH}"
    _default_boot_dev="$(boot_device_name)"
    test -n "${_default_boot_dev}" || exit 112

    permnote "Preparing kernel configuration"
    case "${ARCH}" in
        arm64)
            test -f "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-RPI3" || exit 110
            ${INSTALL_BIN} -v \
                "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-RPI3" \
                "sys/${ARCH}/conf/${SYSTEM_KERNEL}" || exit 111

            # rm -f /usr/bin/ld
            # ln /usr/bin/ld.lld /usr/bin/ld
            ;;

        arm)
            test -f "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-RPI2" || exit 110
            ${INSTALL_BIN} -v \
                "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-RPI2" \
                "sys/${ARCH}/conf/${SYSTEM_KERNEL}" || exit 111
            ;;

        x86_64|amd64)
            # NOTE: overriding x86_64 for architecture used by build system
            ARCH="amd64"
            _new_boot_env="${SYSTEM_TYPE}-v${VERSION}-${ARCH}"
            test -f "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-${SYSTEM_RELEASE_TYPE}" || exit 110

            ${INSTALL_BIN} -v \
                "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-${SYSTEM_RELEASE_TYPE}" \
                "sys/${ARCH}/conf/${SYSTEM_KERNEL}" || exit 111
            ;;

    esac


    ${BEADM_BIN} create "${_new_boot_env}" && \
        permnote "Created new boot environment: ${_new_boot_env}"

    DESTBASE="${SHARED_DIR}/${_new_boot_env}"
    ${BEADM_BIN} mount "${_new_boot_env}" "${DESTBASE}" && \
        permnote "Mounted new environment: ${_new_boot_env}, to destination base: ${DESTBASE}"

    # # export libucl:
    # permnote "Exporting UCL as regular OS library"
    # ${SED_BIN} -i '' -e 's/PRIVATELIB=.*$//' lib/libucl/Makefile 2>> "${LOG_OUTPUT}"
    # ${PATCH_BIN} -p0 -f \
    #     < "${SERVED_REPO}/src/patches/export_ucl.patch" \
    #     2>> "${LOG_OUTPUT}"

    if [ -z "${DONT_BUILD_WORLD}" ]; then
        permnote "Building world v${VERSION}"
        ${MAKE_BIN} \
            -s buildworld \
            -j "${PARALLEL_JOBS}" \
            TARGET="${TARGET:-${ARCH}}" \
            TARGET_ARCH="${TARGET_ARCH:-${ARCH}}" \
            DESTDIR="${DESTBASE}" \
            FORMATS="${DOC_FORMATS}" \
            DOC_LANG="${LANG}" \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" || exit 119
    fi

    permnote "Building kernel ${SYSTEM_KERNEL}"
    ${MAKE_BIN} \
        -s buildkernel \
        -j "${PARALLEL_JOBS}" \
        TARGET="${TARGET:-${ARCH}}" \
        TARGET_ARCH="${TARGET_ARCH:-${ARCH}}" \
        DESTDIR="${DESTBASE}" \
        FORMATS="${DOC_FORMATS}" \
        DOC_LANG="${LANG}" \
        2>> "${LOG_OUTPUT}" || exit 120

    permnote "Installing kernel ${SYSTEM_KERNEL}"
    ${MAKE_BIN} \
        -s installkernel \
        TARGET="${TARGET:-${ARCH}}" \
        TARGET_ARCH="${TARGET_ARCH:-${ARCH}}" \
        DESTDIR="${DESTBASE}" \
        FORMATS="${DOC_FORMATS}" \
        DOC_LANG="${LANG}" \
        >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" || exit 121

    if [ -z "${DONT_BUILD_WORLD}" ]; then
        ${RM_BIN} -rf /var/tmp/temproot

        permnote "Merging Pre-buildworld configuration"
        ${MERGEMASTER_BIN} -p -a 2>> "${LOG_OUTPUT}"

        permnote "Installing world to: ${DESTBASE}"
        ${MAKE_BIN} \
            -s installworld \
            TARGET="${TARGET:-${ARCH}}" \
            TARGET_ARCH="${TARGET_ARCH:-${ARCH}}" \
            DESTDIR="${DESTBASE}" \
            FORMATS="${DOC_FORMATS}" \
            DOC_LANG="${LANG}" \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" && \
            permnote "Installed"

        case "${SYSTEM_VERSION_MAJOR}" in
            12*)
                cd share/ctypedef
                ${MAKE_BIN} clean
                ${MAKE_BIN} DESTDIR="${DESTBASE}" >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}"
                ${MAKE_BIN} install DESTDIR="${DESTBASE}" >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}"
                cd ../..
        esac

        permnote "Merging configuration in: ${DESTBASE}"
        ${MERGEMASTER_BIN} -P -a \
            -D "${DESTBASE}" \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" && \
            permnote "Merged"

        permnote "Cleaning old dirs and files under: ${DESTBASE}"
        ${YES_BIN} | ${MAKE_BIN} delete-old delete-old-libs \
            TARGET="${TARGET:-${ARCH}}" \
            TARGET_ARCH="${TARGET_ARCH:-${ARCH}}" \
            DESTDIR="${DESTBASE}" \
            FORMATS="${DOC_FORMATS}" \
            DOC_LANG="${LANG}" \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" && \
            permnote "Cleaned"
    fi

    permnote "Post patching modified fstabs"
    ${SED_BIN} -i '' -e '/src/ d' "${DESTBASE}/etc/fstab"
    ${SED_BIN} -i '' -e '/obj/ d' "${DESTBASE}/etc/fstab"
    ${SED_BIN} -i '' -e '/src/ d' "/etc/fstab"
    ${SED_BIN} -i '' -e '/obj/ d' "/etc/fstab"

    permnote "Removing sources, debug and other cache files before ZFS send…"
    ${RM_BIN} -rf \
        "${DESTBASE}/etc/fstab.svd" \
        "${DESTBASE}/COPYRIGHT" \
        "${DESTBASE}/.profile" \
        "${DESTBASE}${BUILD_HOST_MARKER}" \
        "${DESTBASE}/mnt" \
        "${DESTBASE}/net" \
        "${DESTBASE}/proc" \
        "${DESTBASE}/media" \
        "${DESTBASE}/sys" \
        "${DESTBASE}/boot/kernel.old" \
        "${DESTBASE}/${LAMBDA}/src" \
        "${DESTBASE}/${LAMBDA}/obj" \
        "${DESTBASE}${CACHE_DIR}" \
        "${DESTBASE}/usr/lib/debug"

    cd /
    sync

    # bring back non arm64 linker back!
    # case "${ARCH}" in
    #     arm64)
    #         if [ -f "/usr/bin/ld.original" ]; then
    #             rm -f /usr/bin/ld
    #             ln -s /usr/bin/ld.bfd /usr/bin/ld
    #         fi
    #         ;;
    # esac
    # ${GPART_BIN} bootcode \
    #     -b "${DESTBASE}/boot/pmbr" \
    #     -p "${DESTBASE}/boot/gptzfsboot" \
    #     -i 1 \
    #     "${_default_boot_dev}" && \
    #     permnote "Boot code updated for: ${_new_boot_env}"

    ${BEADM_BIN} umount -f "${_new_boot_env}" && \
        permnote "Unmounted boot environment: ${_new_boot_env}"
    # ${BEADM_BIN} activate "${_new_boot_env}" && \
        # permnote "Commited and activated new boot environment: ${_new_boot_env}"

    NEW_RELEASE="${ZPOOL}/ROOT/${_new_boot_env}@v${VERSION}"
    NEW_BOOT_ORIGIN_FILE="${ARCHIVE_SNAPSHOTS_DIR}/${SYSTEM_TYPE}-v${VERSION}-${ARCH}${ZFSX_EXT}"
    ${ZFS_BIN} snapshot "${NEW_RELEASE}" && \
        permnote "Done release snapshot: ${NEW_RELEASE}"

    ${MKDIR_BIN} \
        -p "${ARCHIVE_SNAPSHOTS_DIR}"

    ${ZFS_BIN} send ${DEFAULT_SNAPSHOT_SEND_OPTS} \
        "${NEW_RELEASE}" | ${LZ4_BIN} ${DEFAULT_LZ4_OPTS} \
        > "${NEW_BOOT_ORIGIN_FILE}" && \
        permnote "Sent release snapshot: ${NEW_RELEASE}, to file: ${NEW_BOOT_ORIGIN_FILE}" && \
        ${BEADM_BIN} destroy -F "${_new_boot_env}" && \
        permnote "Release wiped from local boot environments. Use installer script to install or perform the OS update."

    ${CHMOD_BIN} 600 "${HOME_DIR}/.ssh"
    ${CHMOD_BIN} a+r "${NEW_BOOT_ORIGIN_FILE}"

    _zfs_file_size="$(echo "$(${STAT_BIN} -f%z "${NEW_BOOT_ORIGIN_FILE}" 2>/dev/null) /1024.0/1024.0" | ${BC_BIN} 2>/dev/null)"

    permnote "Uploading: $(distn "${SCP_BIN} -4 -B \"${NEW_BOOT_ORIGIN_FILE}\" \"${DESTINATION}\"") (${_zfs_file_size} MiB)"
    ${SCP_BIN} -4 -B \
        "${NEW_BOOT_ORIGIN_FILE}" \
        "${DESTINATION}" && \
        permnote "Uploaded release snapshot file: ${NEW_BOOT_ORIGIN_FILE} to: ${DESTINATION}." && \
        ${SSH_BIN} "${DEST_ACCOUNT}" "echo ${NEW_BOOT_ORIGIN_FILE##*/} > ${DEST_PATH}/current" && \
        permnote "Build-Base is now complete." && \
        return 0

    permnote "Post cleanup"
    ${RM_BIN} -f /etc/fstab.svd

    return 1
}
